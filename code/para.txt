// Network Parameters
7	// int _tick_OtoP; number of ticks in one epoch (trial) of otop training; different types of training can happen in different ticks;
7	// int _tick_PtoP; number of ticks in one epoch (trial) of ptop training; different types of training can happen in different ticks; 
0.25	// double _intconst; default value is 0.25;
1	// int _tai; default value is 1
5e-2	// double _epsi; episilon value for the activation curve; default value is 0.001;
0	// int _acttype; LOGISTIC_ACTIVATION (0) (Harm 1998), TANH_ACTIVATION (1) (Harm & Seidenberg 1999), FAST_LOGISTIC_ACTIVATION (2), LINEAR_ACTIVATION (3), or STEP_ACTIVATION (4)
1	// int _errortype; SUM_SQUARED_ERROR (1) or CROSS_ENTROPY_ERROR (2)
0	// int _weightnoisetype; NO_NOISE (0), ADDITIVE_NOISE (1), or MULTIPLICATIVE_NOISE (2)
0.0	// double _weightnoise; noise on connection weights;
0.0	// double _actnoise; activation noise;
0.0	// double _inputnoise; input noise;
0.1	// double _errrad; error radius, errors less than it are counted as zero; default value is 0.1;
0.1	// double _range; range of initial weights, the initially randomized weights are positive and negative _range;
208	// int _OrthoS; size (number of nodes) of the orthographical layer;
100	// int _HidS; size of the hidden layer between the orthographical and phonological layers;
175	// int _PhonoS; size of the phonological layer; For Harm & Seidenberg 1999, 77 (7*11); For Harm 1998, 175 (7*25);
40	// int _PhoHidS; size of the hidden layers between phonological layers, this is the cleanup layer;
// Parameters for phonemes
25	// int _pho_features; number of features in each phoneme; For Harm & Seidenberg 1999, 11; For Harm 1998, 25;
39	// int _pho_number; number of phonemes in the dictionary; For Harm & Seidenberg 1999, 36 (24+11+1); For Harm 1998, 39 (24+10+4+1);
// Parameters for file names storing phonological dictionary and training and testing examples
./phon_Harm1998.txt	// char *_phoF; file name of the phoneme dictionary, which is a list of phonemes and their feature values;
./TrEm3_Harm1998.txt	// char *_exTrF; file name of the training examples; TrEm_HarmSeidenberg1999.txt or TrEm_Harm1998.txt;
./Te.txt	// char *_exTeF; file name of the testing examples; TeEm_HarmSeidenberg1999.txt or TeEm_Harm1998.txt or TE.txt (for nonwords);
./TrEm3_PtoP_Harm1998.txt	// char *_exTrF_PtoP; file name of the training examples training phonological cleanup units; TrEM_PtoP_HarmSeidenberg1999.txt or TrEM_PtoP_Harm1998.txt; 
// Parameters for running
0	// unsigned int _seed; random seed for each run; if _seed=0, use random seed;
100000000	// unsigned int _iter; total number of training;
1000	// unsigned int _rep; sampling frequency during training;
1	// int _ptop; whether involve ptop training (1) or not (0);
1000000	// unsigned int _iter_ptop; total number of ptop training;
1000	// unsigned int _rep_ptop; sampling frequency during ptop training;
1	// int _samp_method;	sampling method; linear (0) or logarithm-like (1) sampling;
1	// int _v_method; method to translate ouput during training; based on smallest Euclidean-distance (0) or vector range (1);
0.5	// double _v_thres; if _v_method=0, the threshold used for vector range method;
0	// int _recVec; whether recording output and hidden layers' vectors (1) or not (0);
